const express = require('express');
const router = express.Router();
const request = require('request');

const userReq = require('../requests/user_api');
const docReq = require('../requests/doc_api');
const appointmentReq = require('../requests/appointment_api');

module.exports = (app) => {
  app.use('/', router);
};

router.get('/users/:id', (req, res, next) => {
	let id = req.params.id;
		
	console.log('***\n\n' + new Date() + '\n: ' + 'asking Users serv for user ' + id);
	
	userReq.getUserById(id, function(err, response, body){
		if (err)
			return next(err);
		else {
			res.status(response.statusCode).send(JSON.parse(body));
		}
	});
});

router.get('/users/:id/appointments', (req, res, next) => {
	let id = req.params.id;
	
	let page = req.query.page;
	let size = req.query.size;
	
	page  = (typeof(page) != 'undefined') ? page : 0;
	size = (typeof(size) != 'undefined') ? size : 20;
		
	console.log('***\n\n' + new Date() + '\n: ' + 'asking Users serv for appointments of user ' + id);
	
	userReq.getUserAppointmentsById(id, page, size, function(err, response, body){
		if (err)
			return next(err);
		else {
			let result = JSON.parse(body);
			let counter = 0;
			
			// sending result if forEach never started
			if (result.rows.length == 0) {
				console.log('No need to send any reqs');
				res.status(200).send(result);
			}
			
			//rendering appointments ids to full info
			result.rows.forEach(function (item, index) {
				appointmentReq.getAppointmentById(item.id, function (errors, response, body) {
					if (errors) {
						// sending result if appointments server not answered
						console.log('fixing appointment connect error. Counter: ' + (counter+1));
						if (++counter == result.rows.length) res.status(200).send(result);
					} else {
						result.rows[index] = JSON.parse(body);
						
						//transforming docId into full doc info
						docReq.getDocById(result.rows[index].docId, function (error, response, body) {
							if(!error) {
								
								result.rows[index].doc = JSON.parse(body); // adding new doc field into result by body of request
								delete result.rows[index].docId;		   // removing used docId form result
							} else {
								console.log('Cannot reach doc serv');
							}
					
							// sending result if all necessary requests were send to appointment serv
							if (++counter == result.rows.length) res.status(200).send(result);
						});
					}
				});
			});
		}
	});
});

router.patch('/users/:id/appointments', (req, res, next) => {
	let id = req.params.id;
	
	let appointmentId = req.query.appointmentId;
	
	console.log('***\n\n' + new Date() + '\n: ' + 'asking Appointment serv to lock appointment' + appointmentId);
	
	appointmentReq.setAppointmentLocked(appointmentId, function(err, response, body){
		body = JSON.parse(body);
		if (err) 
			return next(err);
		else if (body.result == 0)
			res.status(200).send(body);
		else {
			console.log('asking User serv to add appointment' + appointmentId + ' for user ' + id);
			
			userReq.addUserAppointment(id, appointmentId, function(err, response, body){
				if (err)
					return next(err);
				else {
					res.status(200).send(JSON.parse(body));
				}
			});
		}
	});
});

router.delete('/users/:id/appointments', (req, res, next) => {
	let id = req.params.id;
	
	let appointmentId = req.query.appointmentId;
	
	console.log('***\n\n' + new Date() + '\n: ' + 'asking User serv to delete appointment' + appointmentId + ' for user ' + id);
	
	appointmentReq.setAppointmentUnLocked(appointmentId, function(err, response, body){
		body = JSON.parse(body);
		if (err) 
			return next(err);
		else if (body.result == 0)
			res.status(200).send(body);
		else {
			console.log('asking User serv to add appointment' + appointmentId + ' for user ' + id);
			
			userReq.deleteUserAppointment(id, appointmentId, function(err, response, body){
				if (err)
					return next(err);
				else {
					res.status(200).send(JSON.parse(body));
				}
			});
		}
	});
});

router.get('/appointments', (req, res, next) => {
	let docId = req.query.docId;
	let page  = req.query.page;
	let size = req.query.size;
	
	page  = (typeof(page) != 'undefined') ? page : 0;
	size = (typeof(size) != 'undefined') ? size : 20;

	console.log('***\n\n' + new Date() + '\n: ' + 'asking Appointments serv for appointments of docId ' + docId);
	
	appointmentReq.getAppointmentsByDocId(docId, page, size, function(err, response, body){
		if (err)
			return next(err);
		else {
			res.status(200).send(JSON.parse(body));
		}
	});
});

router.get('/specs', (req, res, next) => {
	let page  = req.query.page;
	let size = req.query.size;
	
	page  = (typeof(page) != 'undefined') ? page : 0;
	size = (typeof(size) != 'undefined') ? size : 20;

	console.log('***\n\n' + new Date() + '\n: ' + 'asking Doc serv for specs');
	
	docReq.getSpecs(page, size, function(err, response, body){
		if (err)
			return next(err);
		else {
			res.status(200).send(JSON.parse(body));
		}
	});
});

router.get('/doctors', (req, res, next) => {
	let spec = req.query.spec;
	let page = req.query.page;
	let size = req.query.size;
	
	page  = (typeof(page) != 'undefined') ? page : 0;
	size = (typeof(size) != 'undefined') ? size : 20;
	
	console.log('***\n\n' + new Date() + '\n: ' + 'asking Doc serv for specs');
	
	docReq.getDoctorsBySpecId(spec, page, size, function(err, response, body){
		if (err)
			return next(err);
		else {
			res.status(200).send(JSON.parse(body));
		}
	});
});

router.get('/doctors/:id', (req, res, next) => {
	let id = req.params.id;
	
	console.log('***\n\n' + new Date() + '\n: ' + 'asking Doc serv for info on doc ' + id);
	
	docReq.getDocById(id, function (err, response, body) {
		if (err)
			return next(err);
		else {
			res.status(200).send(JSON.parse(body));
		}
	});
});